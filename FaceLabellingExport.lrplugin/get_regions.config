#------------------------------------------------------------------------------
# File:         get_regions.config
#
# Description:  User-defined Composite tag definitions to allow conversion of
#               face regions to a consistent format
#
# Usage:     1) Get centred regions, from any of MWG, MP WLPG or IPTC formats:
#
#               exiftool -config get_regions.config -struct -j -RegionsCentred FILE
#
#            2) Get absolute regions (x left, y top, width, height) in pixels,
#               excluding 'focus' region type; and apply any EXIF crop or rotate
#               from any of MWG, MP WLPG or IPTC formats
#
#               exiftool -config get_regions.config -struct -j -RegionsAbsoluteNotFocus FILE
#
#            3) Get ImageMagick command list to crop and save to thumbnail files
#               output files are saved to the same directory but appended with "_thumb<number>.jpg"
#
#               exiftool -config get_regions.config -struct -j -IMCropThumbnailCommand FILE
#
#            4) Get ImageMagick command to draw region outlines and save to new image file
#               output file is saved to same directory but prefixed with "region_"
#
#               exiftool -config get_regions.config -struct -j -IMRegionOutlineCommand FILE
#
# Requires:     ExifTool version 11.74 or later (according to examples cribbed)
#
# References:   http://www.metadataworkinggroup.org/specs/
#
# Notes:        Config script sets 'Struct' to 1 to access tag names
#               
# Known limitations:
#               LightRoom image export doesn't appear to save "AlreadyApplied" flag
#               - during export seems need to assume rotation not already applied
#               - but on resulting jpg file from export, seem to need to assume rotation already applied
#
#               Not yet found a way to output unformatted text
#               (e.g. for ImageMagick commands) with struct set (which is needed
#               for accessing tag names to handle multiple meta-data types.
#               Currently interpret this is due to ExifTool giving precidence
#               to struct over binary flag in output loop.
#------------------------------------------------------------------------------


# =============
# == Options ==
# =============

# Set 'Struct' since it is required in order to access region data by tag names
# in order to detect and handle different metadata formats (MWG, MP WLP, IPTC)
%Image::ExifTool::UserDefined::Options = (
    Struct => 1, # Needed for Composite function to see the tag names
);


# ======================
# == Helper Functions ==
# ======================

# Update region coordinates to allow for image rotation according to EXIF orientation
# Input: 0) rectangle array ref (x,y,w,h) using normalised coordinates (0-1)
#        1) EXIF orientation value
#               1 = Horizontal (normal)
#               2 = Mirror horizontal
#               3 = Rotate 180
#               4 = Mirror vertical
#               5 = Mirror horizontal and rotate 270 CW
#               6 = Rotate 90 CW
#               7 = Mirror horizontal and rotate 90 CW
#               8 = Rotate 270 CW
# Output: rectangle updated in-place
sub ApplyRotation($$)
{
    my ($rect, $orientation) = @_;
    
    if ($orientation) {
        my ($x,$y,$w,$h) = @$rect;
        if ($orientation == 1) { # 0 degrees
            @$rect = ($x,$y,$w,$h); # pass through unchanged
        } elsif ($orientation == 6) { # 90 degrees
            @$rect = (1-$h-$y, $x, $h, $w); # x,y,w,h
        } elsif ($orientation == 3) { # 180 degrees
            @$rect = (1-$x-$w, 1-$y,$h, $w, $h); # x,y,w,h
        } elsif ($orientation == 8) { # 270 degrees
            @$rect = ($y, 1-$x-$w, $h, $w); # x,y,w,h
        } else { # unknown
            @$rect = ("Unknown");
        }
    }
}

# Update region coordinates to allow for image crop according to EXIF crop
# Input: 0: rectangle array ref (x,y,w,h) using normalised coordinates (0-1)
#        1: crop settings (Left, Right, Top, Bottom, HasCrop)
# Output: rectangle updated in-place
sub ApplyCrop {
    my ($rect, $crop) = @_;
    my ($x, $y, $w, $h) = @$rect;
    my ($cropLeft, $cropRight, $cropTop, $cropBottom, $hasCrop) = @$crop;
    
    if ((defined $hasCrop) and ($hasCrop eq 'True')) {
        $x = ($x - $cropLeft) / ($cropRight - $cropLeft) if ($cropLeft and $cropRight);
        $y = ($y - $cropTop) / ($cropBottom - $cropTop) if ($cropTop and $cropBottom);
        $w = $w / ($cropRight - $cropLeft) if ($cropLeft and $cropRight);
        $h = $h / ($cropBottom - $cropTop) if ($cropTop and $cropBottom);
    }
    
    @$rect = ($x, $y, $w, $h); # update rectangle in-place
}

# Update region coordinates from normalised (0-1) to absolute (pixels), 
# and from centre coordinate to top-left coordinate,
# including any updates for crop and rotate according to EXIF orientation
# Input: 0) rectangle array ref (x,y,w,h) using normalised coordinates (0-1)
#        1) image width, image height in pixels
#        2) EXIF orientation value
#               1 = Horizontal (normal)
#               2 = Mirror horizontal
#               3 = Rotate 180
#               4 = Mirror vertical
#               5 = Mirror horizontal and rotate 270 CW
#               6 = Rotate 90 CW
#               7 = Mirror horizontal and rotate 90 CW
#               8 = Rotate 270 CW
#        3) crop rectangle (cropLeft, cropRight, cropTop, cropBottom) using normalised coordinates (0-1)
#        4) optional boolean flag from EXIF for whether there is a crop
#        5) optional boolean flag from EXIF for whether rotation and crop are already applied
# Output: rectangle updated in-place
sub NormToAbsoluteCropRotate {
    my ($rect, $image_width, $image_height, $orientation, $crop, $AlreadyApplied) = @_;
    
    # Apply crop and rotation unless "AlreadyApplied==False"
    # also scale from normalised (0-1) to absolute (pixels)
    # and from coordinate of centre-point, to top-left corner
    
    #my $is_during_lightroom_export = 1; # need to figure out detection of lightroom export
    
    if ( ((defined $AlreadyApplied) and ($AlreadyApplied eq 'True')) ) {
        ApplyCrop(\@rect, \@crop); # update rectangle in-place
        my ($x, $y, $w, $h) = @$rect; # unpack rectangle after crop
    
        if ($orientation) {
            my ($x,$y,$w,$h) = @$rect;
            if ($orientation == 1) { # 0 degrees; ($x, $y, $w, $h); # x,y,w,h
                $X = ($x - $w/2) * $image_width;
                $Y = ($y - $h/2) * $image_height;
                $W =  $w * $image_width;
                $H =  $h * $image_height;
            } elsif ($orientation == 6) { # 90 degrees; (1-$h-$y, $x, $h, $w); # x,y,w,h
                #($image_width, $image_height) = ($image_height, $image_width);
                $X = (1 - $y - $h/2) * $image_height;
                $Y = ($x - $w/2) * $image_width;
                $W =  $h * $image_height;
                $H =  $w * $image_width;
            } elsif ($orientation == 3) { # 180 degrees; (1-$x-$w, 1-$y-$h, $w, $h); # x,y,w,h
                $X = (1 - $x - $w/2) * $image_width;
                $Y = (1 - $y - $h/2) * $image_height;
                $W =  $w * $image_width;
                $H =  $h * $image_height;
            } elsif ($orientation == 8) { # 270 degrees; ($y, 1-$x-$w, $h, $w); # x,y,w,h
                #($image_width, $image_height) = ($image_height, $image_width);
                $X = ($y - $h/2) * $image_height;
                $Y = (1 - $x - $w/2) * $image_width;
                $W =  $h * $image_height;
                $H =  $w * $image_width;
            } else { # unknown
                @$rect = ("Unknown");
            }
        } else { # no orientation field
            my ($x,$y,$w,$h) = @$rect; # unpack rectangle
            $X = ($x - $w/2) * $image_width;
            $Y = ($y - $h/2) * $image_height;
            $W =  $w * $image_width;
            $H =  $h * $image_height;
        }
    } else { # $AlreadyApplied=False; adjust from centred to top-left-corner, and scale from normalised to absolute
        my ($x,$y,$w,$h) = @$rect; # unpack rectangle
        $X = ($x - $w/2) * $image_width;
        $Y = ($y - $h/2) * $image_height;
        $W =  $w * $image_width;
        $H =  $h * $image_height;
    }
    
    # update rectangle to return in-place
    @$rect = ($X, $Y, $W, $H);
}

# =================================
# == User defined composite tags ==
# =================================

%Image::ExifTool::UserDefined = (

    # Composite tags are added to the Composite table:
    'Image::ExifTool::Composite' => {

        # Extract input file basename (without path or suffix)
        BaseName => {
            Require => {
                0 => 'FileName',
            },
            # remove the extension from FileName
            ValueConv => '$val[0] =~ /(.*)\./ ? $1 : $val[0]',
        },
        
        # get region structure as centred, normalised (0-1) coordinates; from
        # MWG RegionInfo structure
        # =========================
        GetRegionMWG => {
            Name => 'RegionsCentred',
            Require => {
                0 => 'RegionInfo',
                1 => 'ImageWidth',
                2 => 'ImageHeight',
            },
            Desire => {
                3 => 'Orientation',
                4 => 'CropLeft',
                5 => 'CropRight',
                6 => 'CropTop',
                7 => 'CropBottom',
                8 => 'HasCrop',
                9 => 'AlreadyApplied',
            },
            ValueConv => q{
                my ($rgn, @outAr);
                my $result = "Initial value";
                foreach $rgn (@{$val[0]{RegionList}}) {
                    next unless $$rgn{Area} or defined $$rgn{Name};
                    my %newRgn;
                    if ($$rgn{Area}) {
                        my @rect = @{$$rgn{Area}}{'X','Y','W','H'};
                        $newRgn{Area} = {
                            X => $rect[0], # x centre
                            Y => $rect[1], # y centre
                            W => $rect[2],
                            H => $rect[3],
                            Unit => 'normalized',
                        }
                    }
                    $newRgn{Name} = $$rgn{Name} if defined $$rgn{Name};
                    $newRgn{Type} = $$rgn{Type} if defined $$rgn{Type};
                    push @outAr, \%newRgn; # push region to outAr
                };
                return {
                    ImageInfo  => { W => $val[1], H => $val[2], Unit => 'pixel', 
                                    Orientation => defined $val[3] ? $val[3] : '', 
                                    AlreadyApplied => defined $val[9] ? $val[9] : '', 
                                    SourceFormat => 'MWG'
                    },
                    RegionList => @outAr ? \@outAr :undef, # return outAr if it exists, otherwise undef
                };
            },
        },
        
        # get region structure as centred, normalised (0-1) coordinates; from
        # Microsoft RegionInfoMP structure
        # =========================
        GetRegionMP => {
            Name => 'RegionsCentred',
            Require => {
                0 => 'RegionInfoMP',
                1 => 'ImageWidth',
                2 => 'ImageHeight',
            },
            Desire => { ## not sure if these are used by Microsoft; including just in case
                3 => 'Orientation',
                4 => 'CropLeft',
                5 => 'CropRight',
                6 => 'CropTop',
                7 => 'CropBottom',
                8 => 'HasCrop',
                9 => 'AlreadyApplied',
            },
            ValueConv => q{
                my ($rgn, @outAr);
                foreach $rgn (@{$val[0]{Regions}}) {
                    next unless $$rgn{Rectangle} or defined $$rgn{PersonDisplayName};
                    my %newRgn = ( Type => 'Face' );
                    if ($$rgn{Rectangle}) {
                        my @rect = @{$$rgn{Area}}{'X','Y','W','H'};
                        $newRgn{Area} = {
                            X => $rect[0] + $rect[2]/2, # x centre
                            Y => $rect[1] + $rect[3]/2, # y centre
                            W => $rect[2],
                            H => $rect[3],
                            Unit => 'normalized',
                        } if @rect == 4;
                    }
                    $newRgn{Name} = $$rgn{PersonDisplayName} if defined $$rgn{PersonDisplayName};
                    push @outAr, \%newRgn; # push region to outAr
                }
                return {
                    ImageInfo  => { W => $val[1], H => $val[2], Unit => 'pixel', 
                                    Orientation => defined $val[3] ? $val[3] : '', 
                                    AlreadyApplied => defined $val[9] ? $val[9] : '', 
                                    SourceFormat => 'MP'
                    },
                    RegionList => @outAr ? \@outAr :undef, # return outAr if it exists, otherwise undef
                };
            },
        },

        # get region structure as centred, normalised (0-1) coordinates; from
        # IPTC ImageRegion list
        # =========================
        GetRegionIPTC => {
            Name => 'RegionsCentred',
            Require => {
                0 => 'ImageRegion',
                1 => 'ImageWidth',
                2 => 'ImageHeight',
            },
            Desire => {
                3 => 'Orientation',
                4 => 'CropLeft',
                5 => 'CropRight',
                6 => 'CropTop',
                7 => 'CropBottom',
                8 => 'HasCrop',
                9 => 'AlreadyApplied',
            },
            ValueConv => q{
                my ($rgn, @outAr);
                my $rgns = ref $val[0] eq 'ARRAY' ? $val[0] : [ $val[0] ]; 
                foreach $rgn (@$rgns) {
                    my %newRgn = ( Type => 'Face' );
                    if not ($$rgn{RegionBoundary} and $$rgn{RegionBoundary}{RbShape} eq 'rectangle') {
                        next unless defined $$rgn{Name};
                    } else {
                        my @rect = @{$$rgn{RegionBoundary}}{'RbX','RbY','RbW','RbH'};
                        if ($$rgn{RegionBoundary}{RbUnit} eq 'pixel') {
                            $rect[0] /= $val[1],  $rect[2] /= $val[1];
                            $rect[1] /= $val[2];  $rect[3] /= $val[2];
                        }

                        $newRgn{Area} = {
                            X => $rect[0] + $rect[2]/2, # x centre
                            Y => $rect[1] + $rect[3]/2, # y centre
                            W => $rect[2],
                            H => $rect[3],
                            Unit => 'normalized',
                        };
                    }
                    $newRgn{Name} = $$rgn{Name} if defined $$rgn{Name};
                    push @newRgns, \%newRgn;
                }
                return {
                    ImageInfo  => { W => $val[1], H => $val[2], Unit => 'pixel', 
                                    Orientation => defined $val[3] ? $val[3] : '', 
                                    AlreadyApplied => defined $val[9] ? $val[9] : '', 
                                    SourceFormat => 'IPTC'
                    },
                    RegionList => @outAr ? \@outAr :undef, # return outAr if it exists, otherwise undef
                };
            },
        },
        
        # Get absolute rectangle (x left, y top, width, height in pixels) from
        # standardised (centred, normalised 0-1) region structure, including
        # applying any crop or rotation specified in EXIF
        # =============================
        GetAbsoluteRegionNotFocus => {
            Name => 'RegionsAbsoluteNotFocus',
            Require => {
                0 => 'RegionsCentred',
                1 => 'ImageWidth',
                2 => 'ImageHeight',
            },
            Desire => {
                3 => 'Orientation',
                4 => 'CropLeft',
                5 => 'CropRight',
                6 => 'CropTop',
                7 => 'CropBottom',
                8 => 'HasCrop',
                9 => 'AlreadyApplied',
            },
            ValueConv => q{
                my ($rgn, @outAr);
                my $rgns = ref $val[0] eq 'ARRAY' ? $val[0] : [ $val[0] ];
                
                foreach $rgn (@{$val[0]{RegionList}}) {
                    next unless $$rgn{Area} or defined $$rgn{Name};
                    next if ((defined $$rgn{Type}) and ($$rgn{Type} eq 'Focus'));
                    my %newRgn;
                    if ($$rgn{Area}) {
                        my @rect = @{$$rgn{Area}}{'X','Y','W','H'};
                        my @crop = ($val[4], $val[5], $val[6], $val[7], $val[8]);
                        NormToAbsoluteCropRotate(\@rect, $val[1], $val[2], $val[3], \@crop, $val[9]);
                        $newRgn{Area} = {
                            X => $rect[0], # x left, absolute
                            Y => $rect[1], # y top, absolute
                            W => $rect[2], # width, absolute
                            H => $rect[3], # height, absolute
                            Unit => 'absolute',
                        }
                    }
                    $newRgn{Name} = $$rgn{Name} if defined $$rgn{Name};
                    $newRgn{Type} = $$rgn{Type} if defined $$rgn{Type};
                    push @outAr, \%newRgn; # push region to outAr
                }
                return {
                    ImageInfo  => {
                        ImageWidth => $val[1], ImageHeight => $val[2], Unit => 'pixel',
                        Orientation    => defined $val[3] ? $val[3] : '',
                        HasCrop        => defined $val[8] ? $val[8] : '',
                        AlreadyApplied => defined $val[9] ? $val[9] : '',
                    },
                    RegionList => @outAr ? \@outAr :undef, # return outAr if it exists, otherwise undef
                };
            },
        },
        
        # get ImageMagick command to crop and save thumbnail images
        # output files are saved to the same directory but appended with "_thumb<number>.jpg"
        # =======================
        GetImageMagickThumbnailCommand => {
            Name => 'IMCropThumbnailCommand',
            Require => {
                0 => 'RegionsAbsoluteNotFocus',
                1 => 'FileName',
                2 => 'Directory',
                3 => 'BaseName',
            },
            ValueConv => q {
                my ($rgn, @DimensionAr, @NameAr);
                my (@commandAr, $command_string, $region_cmd);
                my $rgns = ref $val[0] eq 'ARRAY' ? $val[0] : [ $val[0] ];
                for my $i (0 .. $#{$val[0]{RegionList}}) {
                    $rgn = ${$val[0]{RegionList}}[$i];
                    next unless $$rgn{Area} or defined $$rgn{Name};
                    my %newRgn;
                    if ($$rgn{Area}) {
                        my @rect = @{$$rgn{Area}}{'X','Y','W','H'};
                        $command_string = "magick '$val[2]/$val[1]'";
                        $region_cmd = sprintf(' -crop %dx%d+%d+%d',$rect[2],$rect[3],$rect[0],$rect[1]); # Round to nearest INT and format for ImageMagick
                        $command_string = $command_string . $region_cmd;
                        $command_string = $command_string . " '$val[2]/$val[3]_thumb$i.jpg'";
                        push @commandAr, $command_string;
                    }
                 }

                return \@commandAr;
            },
        },

        # get ImageMagick command to draw region outlines and save to new file
        # output file is saved to same directory but prefixed with "region_"
        # =======================
        GetImageMagickOutlineCommand => {
            Name => 'IMRegionOutlineCommand',
            Require => {
                0 => 'RegionsAbsoluteNotFocus',
                1 => 'FileName',
                2 => 'Directory',
                3 => 'BaseName',
            },
            ValueConv => q {
                my ($rgn, @DimensionAr, @NameAr);
                my $rgns = ref $val[0] eq 'ARRAY' ? $val[0] : [ $val[0] ];
                my $command_string = "magick '$val[2]/$val[1]'";
                my $line_width = 1;
                my $line_colour = 'blue';
                my $fill_colour = 'rgba( 255, 255, 255, 0.0)'; # last parameter is 0 for transparent
                my $output_filename = $val[2] . '/region_' . $val[1];
                $command_string = $command_string . " -strokewidth $line_width -stroke $line_colour -fill '$fill_colour'";
                foreach $rgn (@{$val[0]{RegionList}}) {
                    next unless $$rgn{Area} or defined $$rgn{Name};
                    my %newRgn;
                    if ($$rgn{Area}) {
                        my @rect = @{$$rgn{Area}}{'X','Y','W','H'};
                        my $region_cmd = sprintf(" -draw 'rectangle %d,%d %d,%d'",$rect[0],$rect[1],$rect[0]+$rect[2],$rect[1]+$rect[3]); # Round to nearest INT and format for ImageMagick
                        $command_string = $command_string . $region_cmd;
                    }
                 }
                 $command_string = $command_string . " '$output_filename'";

				return $command_string;
            },
        },

    },
);

1;  #end
